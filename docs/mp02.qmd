---
title: Identifying Environmentally Responsible US Public Transit Systems
author: "Dev Lala"
date: "`r Sys.Date()`"
format: 
  html:
    code-fold: true
    code-summary: "Show the code"
    self-contained: true
    toc: true
editor: visual
execute:
  engine: knitr
  freeze: true
  echo: true  
  warning: false  
  message: false  
  error: true 
---

# Introduction

This analysis evaluates public transit agencies to determine the most eco-friendly ones. By integrating data from multiple sources, it uncovers key insights on environmental impact. The results will be presented in a press release announcing the GTA IV award winners.

# Objective

-   **Data Integration**: Merge datasets from the National Transit Database and the Energy Information Administration for a comprehensive analysis.

-   **Statistical Analysis**: Compute summary statistics to assess the environmental efficiency of public transit agencies.

-   **Insightful Presentation**: Create a press release highlighting the greenest transit agencies, supported by key statistics and findings.

# **1. Data Acquisition**

```{r}
library(httr2)
library(rvest)
library(datasets)
library(purrr)
library(DT)
library(scales)
library(stringr)
library(dplyr) 
```

```{r}
ensure_package <- function(pkg){
    pkg <- as.character(substitute(pkg))
    options(repos = c(CRAN = "https://cloud.r-project.org"))
    if(!require(pkg, character.only=TRUE)) install.packages(pkg)
    stopifnot(require(pkg, character.only=TRUE))
}

ensure_package(httr2)
ensure_package(rvest)
ensure_package(datasets)
ensure_package(purrr)
ensure_package(DT)

get_eia_sep <- function(state, abbr){
    state_formatted <- str_to_lower(state) |> str_replace_all("\\s", "")
    
    dir_name <- file.path("data", "mp02")
    file_name <- file.path(dir_name, state_formatted)
    
    dir.create(dir_name, showWarnings=FALSE, recursive=TRUE)
    
    if(!file.exists(file_name)){
        BASE_URL <- "https://www.eia.gov"
        REQUEST <- request(BASE_URL) |> 
            req_url_path("electricity", "state", state_formatted)
    
        RESPONSE <- req_perform(REQUEST)
    
        resp_check_status(RESPONSE)
        
        writeLines(resp_body_string(RESPONSE), file_name)
    }
    
    TABLE <- read_html(file_name) |> 
        html_element("table") |> 
        html_table() |>
        mutate(Item = str_to_lower(Item))
    
    if("U.S. rank" %in% colnames(TABLE)){
        TABLE <- TABLE |> rename(Rank = `U.S. rank`)
    }
    
    CO2_MWh <- TABLE |> 
        filter(Item == "carbon dioxide (lbs/mwh)") |>
        pull(Value) |> 
        str_replace_all(",", "") |>
        as.numeric()
    
    PRIMARY <- TABLE |> 
        filter(Item == "primary energy source") |> 
        pull(Rank)
    
    RATE <- TABLE |>
        filter(Item == "average retail price (cents/kwh)") |>
        pull(Value) |>
        as.numeric()
    
    GENERATION_MWh <- TABLE |>
        filter(Item == "net generation (megawatthours)") |>
        pull(Value) |>
        str_replace_all(",", "") |>
        as.numeric()
    
    data.frame(CO2_MWh               = CO2_MWh, 
               primary_source        = PRIMARY,
               electricity_price_MWh = RATE * 10, # / 100 cents to dollars &
               # * 1000 kWh to MWH 
               generation_MWh        = GENERATION_MWh, 
               state                 = state, 
               abbreviation          = abbr
    )
}

EIA_SEP_REPORT <- map2(state.name, state.abb, get_eia_sep) |> list_rbind()
```

```{r}
ensure_package(scales)
ensure_package(DT)

EIA_SEP_REPORT |> 
    select(-abbreviation) |>
    arrange(desc(CO2_MWh)) |>
    mutate(CO2_MWh = number(CO2_MWh, big.mark=","), 
           electricity_price_MWh = dollar(electricity_price_MWh), 
           generation_MWh = number(generation_MWh, big.mark=",")) |>
    rename(`Pounds of CO2 Emitted per MWh of Electricity Produced`=CO2_MWh, 
           `Primary Source of Electricity Generation`=primary_source, 
           `Average Retail Price for 1000 kWh`=electricity_price_MWh, 
           `Total Generation Capacity (MWh)`= generation_MWh, 
           State=state) |>
    datatable()
```

## **2. Initial Analysis of SEP Data**

```{r}
ensure_package(readxl)

DATA_DIR <- file.path("data", "mp02")
dir.create(DATA_DIR, showWarnings=FALSE, recursive=TRUE)


NTD_ENERGY_FILE <- file.path(DATA_DIR, "2023_ntd_energy.xlsx")


if(!file.exists(NTD_ENERGY_FILE)){
    DS <- download.file("https://www.transit.dot.gov/sites/fta.dot.gov/files/2024-10/2023%20Energy%20Consumption.xlsx", 
                  destfile=NTD_ENERGY_FILE, 
                  method="curl")
    
    if(DS | (file.info(NTD_ENERGY_FILE)$size == 0)){
        cat("I was unable to download the NTD Energy File. Please try again.\n")
        stop("Download failed")
    }
}

NTD_ENERGY_RAW <- read_xlsx(NTD_ENERGY_FILE, guess_max = 5000, na = "-")
```

#### 2.1 Which state has the most expensive retail electricity?

```{r}
#Finding the state with the highest electricity price
library(dplyr) 
library(scales)  
library(DT)  

most_expensive_state <- EIA_SEP_REPORT |> 
    arrange(desc(electricity_price_MWh)) |>  
    slice(1) |>  
    mutate(
        electricity_price_MWh = dollar(electricity_price_MWh)  
    ) |>  
    rename(
        `State` = state,
        `Electricity Price (MWh)` = electricity_price_MWh
    ) 

datatable(
    most_expensive_state,
    options = list(
        pageLength = 10,   
        autoWidth = TRUE  
    ),
    caption = "State with the Most Expensive Retail Electricity"
)
```

#### 2.2 Which state has the ‘dirtiest’ electricity mix?

```{r}
library(dplyr)  
library(scales) 
library(DT)  

#Finding the state with the 'dirtiest' electricity mix
dirtiest_state <- EIA_SEP_REPORT |> 
    arrange(desc(CO2_MWh)) |>  
    slice(1) |>  
    mutate(
        CO2_MWh = number(CO2_MWh, big.mark = ",")  
    ) |>  
    rename(
        `State` = state,
        `CO₂ Emissions (lbs/MWh)` = CO2_MWh
    ) 

datatable(
    dirtiest_state,
    options = list(
        pageLength = 10,   
        autoWidth = TRUE  
    ),
    caption = "State with the Dirtiest Electricity Mix"
)
```

#### 2.3 On average, how many pounds of CO2 are emitted per MWh of electricity produced in the US? (Note that you will need to use a suitably *weighted* average here.)

```{r}
#Calculating the weighted average of CO₂ emissions per MWh
library(dplyr)  
library(scales)  
library(DT)      

weighted_avg_CO2 <- sum(EIA_SEP_REPORT$CO2_MWh * EIA_SEP_REPORT$generation_MWh, na.rm = TRUE) / 
                    sum(EIA_SEP_REPORT$generation_MWh, na.rm = TRUE)

average_CO2_table <- data.frame(
    `Weighted Average CO₂ Emissions (lbs/MWh)` = number(round(weighted_avg_CO2, 2), big.mark = ",")
)

datatable(
    average_CO2_table,
    options = list(
        pageLength = 1,  
        autoWidth = TRUE
    ),
    caption = "National Average CO₂ Emissions per MWh"
)
```

#### 2.4 What is the rarest primary energy source in the US? What is the associated cost of electricity and where is it used?

```{r}
library(dplyr)
library(scales)
library(DT)

#Counting occurrences of each primary energy source
rarest_energy_source <- EIA_SEP_REPORT |> 
    count(primary_source, sort = TRUE) |>  
    slice(n()) |>  
    pull(primary_source)

states_using_rarest <- EIA_SEP_REPORT |> 
    filter(primary_source == rarest_energy_source) |> 
    select(state, electricity_price_MWh) |> 
    mutate(electricity_price_MWh = dollar(electricity_price_MWh))  

avg_price_rarest <- mean(EIA_SEP_REPORT$electricity_price_MWh, na.rm = TRUE)

rarest_energy_table <- data.frame(
    `Rarest Primary Energy Source` = rarest_energy_source,
    `Average Electricity Price (MWh)` = dollar(round(avg_price_rarest, 2))
)

datatable(
    rarest_energy_table,
    options = list(
        pageLength = 1,  
        autoWidth = TRUE
    ),
    caption = "Rarest Primary Energy Source in the US"
)

datatable(
    states_using_rarest,
    options = list(
        pageLength = 10,  
        autoWidth = TRUE
    ),
    caption = paste("States Using", rarest_energy_source, "as Primary Energy Source")
)
```

#### 2.5 My home state, Texas, has a reputation as being the home of “dirty fossil fuels” while NY has a reputation as a leader in clean energy. How many times cleaner is NY’s energy mix than that of Texas?

```{r}
#Filtering data for New York and Texas
library(dplyr)
library(scales)
library(DT)

ny_tx_emissions <- EIA_SEP_REPORT |> 
    filter(state %in% c("New York", "Texas")) |> 
    select(state, CO2_MWh)

tx_emissions <- ny_tx_emissions |> filter(state == "Texas") |> pull(CO2_MWh)
ny_emissions <- ny_tx_emissions |> filter(state == "New York") |> pull(CO2_MWh)

times_cleaner <- tx_emissions / ny_emissions

ny_tx_table <- data.frame(
    `State` = c("Texas", "New York"),
    `CO₂ Emissions (lbs/MWh)` = c(tx_emissions, ny_emissions),
    `How Many Times Cleaner?` = c("-", round(times_cleaner, 2))
)

datatable(
    ny_tx_table,
    options = list(
        pageLength = 5, 
        autoWidth = TRUE
    ),
    caption = "Comparison of CO₂ Emissions: Texas vs. New York"
)
```

## 3. Basic Clean-up

```{r}
ensure_package(tidyr)
to_numeric_fill_0 <- function(x){
    replace_na(as.numeric(x), 0)
}

NTD_ENERGY <- NTD_ENERGY_RAW |> 
    select(-c(`Reporter Type`, 
              `Reporting Module`, 
              `Other Fuel`, 
              `Other Fuel Description`)) |>
    mutate(across(-c(`Agency Name`, 
                     `Mode`,
                     `TOS`), 
                  to_numeric_fill_0)) |>
    group_by(`NTD ID`, `Mode`, `Agency Name`) |>
    summarize(across(where(is.numeric), sum), 
              .groups = "keep") |>
    mutate(ENERGY = sum(c_across(c(where(is.numeric))))) |>
    filter(ENERGY > 0) |>
    select(-ENERGY) |>
    ungroup()
```

### Displaying random rows

```{r}
#Displaying 10 random rows
library(dplyr)
library(DT)

random_sample <- NTD_ENERGY |> 
    slice_sample(n = 10)

datatable(
    random_sample,
    options = list(
        pageLength = 10,  
        autoWidth = TRUE
    ),
    caption = "Random Sample of 10 Rows from NTD_ENERGY Dataset"
)
```

### Recoding the Mode Column

```{r}
NTD_ENERGY <- NTD_ENERGY |> 
    mutate(Mode = case_when(
        Mode == "HR" ~ "Heavy Rail",
        Mode == "LR" ~ "Light Rail",
        Mode == "CR" ~ "Commuter Rail",
        Mode == "MB" ~ "Bus",
        Mode == "TB" ~ "Trolleybus",
        Mode == "VP" ~ "Vanpool",
        Mode == "YR" ~ "Hybrid Rail",
        Mode == "SR" ~ "Streetcar",
        Mode == "F"  ~ "Ferry",
        TRUE ~ "Unknown" 
        #Assigning "Unknown" to unidentified modes
    ))
```

### Downloading the 2023 Annual Database Service by Agency

```{r}
ensure_package(readr) 
library(readr)  
NTD_SERVICE_FILE <- file.path(DATA_DIR, "2023_service.csv")
if(!file.exists(NTD_SERVICE_FILE)){
    DS <- download.file("https://data.transportation.gov/resource/6y83-7vuw.csv", 
                  destfile=NTD_SERVICE_FILE, 
                  method="curl")
    
    if(DS | (file.info(NTD_SERVICE_FILE)$size == 0)){
        cat("I was unable to download the NTD Service File. Please try again.\n")
        stop("Download failed")
    }
}

NTD_SERVICE_RAW <- read_csv(NTD_SERVICE_FILE)
```

### Cleaning the file

```{r}
NTD_SERVICE <- NTD_SERVICE_RAW |>
    mutate(`NTD ID` = as.numeric(`_5_digit_ntd_id`)) |> 
    rename(Agency = agency, 
           City   = max_city, 
           State  = max_state,
           UPT    = sum_unlinked_passenger_trips_upt, 
           MILES  = sum_passenger_miles) |>
    select(matches("^[A-Z]", ignore.case=FALSE)) |>
    filter(MILES > 0)
```

## **4. Exploring the NTD Service Data**

#### 4.1. Which transit service has the most UPT annually?

```{r}
library(dplyr)
library(DT)

#Finding the transit service with the most annual UPT
most_upt_service <- NTD_SERVICE |> 
    arrange(desc(UPT)) |> 
    slice(1) |> 
    select(Agency, City, State, UPT)

datatable(
    most_upt_service,
    options = list(
        pageLength = 1,  
        autoWidth = TRUE
    ),
    caption = "Transit Service with the Most Annual UPT"
)
```

#### 4.2. What is the average trip length of a trip on MTA NYC?

```{r}
library(dplyr)
library(DT)

#Calculating the average trip length for MTA in NYC
mta_avg_trip_length <- NTD_SERVICE |> 
    filter(grepl("MTA", Agency) & City == "New York City") |> 
    summarize(`Average Trip Length (Miles per UPT)` = mean(MILES / UPT, na.rm = TRUE))

datatable(
    mta_avg_trip_length,
    options = list(
        pageLength = 1,  
        autoWidth = TRUE
    ),
    caption = "Average Trip Length on MTA NYC"
)
```

#### 4.3. Which transit service in NYC has the *longest* average trip length?

```{r}
library(dplyr)
library(DT)

# Find the NYC transit service with the longest average trip length
longest_nyc_trip <- NTD_SERVICE |> 
    filter(grepl("New York", City, ignore.case = TRUE)) |>  
    mutate(`Average Trip Length (Miles per UPT)` = ifelse(UPT > 0, MILES / UPT, NA)) |> 
    arrange(desc(`Average Trip Length (Miles per UPT)`)) |> 
    slice(1) |> 
    select(Agency, `Average Trip Length (Miles per UPT)`)

library(DT)
datatable(
    longest_nyc_trip,
    options = list(
        pageLength = 5,
        autoWidth = TRUE
    ),
    caption = "NYC Transit Service with the Longest Average Trip Length"
)

```

#### 4.4. Which state has the *fewest* total miles travelled by public transit?

```{r}
library(dplyr)
library(DT)

state_least_miles <- NTD_SERVICE |> 
    group_by(State) |> 
    summarize(`Total Miles Traveled` = sum(MILES, na.rm = TRUE)) |> 
    arrange(`Total Miles Traveled`) |> 
    slice(1)

datatable(
    state_least_miles,
    options = list(
        pageLength = 5,
        autoWidth = TRUE
    ),
    caption = "State with Fewest Total Miles Traveled by Public Transit"
)
```

#### 4.5. Are all states represented in this data? If no, which ones are missing? The state.name and state.abb objects we used above may be useful here.

```{r}
library(dplyr)
library(DT)

# Find states that are missing in the dataset
represented_states <- unique(NTD_SERVICE$State)
missing_states <- setdiff(state.name, represented_states)

missing_states_table <- data.frame(`Missing States` = missing_states)

datatable(
    missing_states_table,
    options = list(
        pageLength = 10,  
        autoWidth = TRUE
    ),
    caption = "States Missing from NTD_SERVICE Dataset"
)
```

## 5. Calculating Total Emissions by joining tables

```{r}
library(dplyr)
library(readr)
library(knitr)
library(DT)

#Ensuring `Mode` exists in `NTD_SERVICE` before joining
if (!"Mode" %in% colnames(NTD_SERVICE)) {
    NTD_SERVICE <- NTD_SERVICE %>%
        left_join(select(NTD_ENERGY, `NTD ID`, Mode), by = "NTD ID") %>%
        distinct()  
}

NTD_JOINED <- NTD_SERVICE %>%
    left_join(NTD_ENERGY, by = c("NTD ID", "Mode")) %>%
    distinct() 

if (!"State" %in% colnames(NTD_JOINED)) {
    stop("Error: The 'State' column is missing. Make sure it is included before joining with EIA_SEP_REPORT.")
} else {
    print("Great! The 'State' column is present. Now proceeding with the join.")
}

NTD_JOINED <- NTD_JOINED %>%
    left_join(EIA_SEP_REPORT, by = c("State" = "state"))

datatable(
    head(NTD_JOINED, 10), 
    options = list(
        pageLength = 10,  
        autoWidth = TRUE
    ),
    caption = "Preview of NTD_JOINED Dataset"
)

```

```{r}
#Renaming columns
NTD_JOINED <- NTD_JOINED %>%
    rename(
        `Natural Gas` = `C Natural Gas`,
        `Diesel` = `Diesel Fuel`,
        `Electricity` = `Electric Battery`,
        `Biofuel` = `Bio-Diesel`,
        `LPG` = `Liquified Petroleum Gas`,
        `CNG` = `Liquified Nat Gas`
    )

#Computing total emissions
NTD_JOINED <- NTD_JOINED %>%
    mutate(
        Total_CO2_Emissions = 
            (`Natural Gas` * 53.06) +  
            (`Diesel` * 74.1) +       
            (`Electricity` * 0) +      
            (`Biofuel` * 70) +         
            (`LPG` * 63.1) +          
            (`CNG` * 55.4)             
    )
```

Agencies with Zero Emissions

```{r}
library(dplyr)
library(DT) 

#Applying filter for agencies with zero emissions
zero_emissions <- NTD_JOINED %>%
    filter(Total_CO2_Emissions == 0) %>%
    select(Agency, State, Mode)

datatable(
  zero_emissions,
  options = list(
    pageLength = 10,  
    autoWidth = TRUE 
  ),
  caption = "Agencies with Zero Emissions"
)
```

#### Highest Polluters

```{r}
library(dplyr)
library(DT)

#Finding top 10 agencies with highest CO2 emissions
top_emitters <- NTD_JOINED %>%
    arrange(desc(Total_CO2_Emissions)) %>%
    select(Agency, State, Mode, Total_CO2_Emissions) %>%
    head(10)

top_emitters <- top_emitters %>%
    mutate(Total_CO2_Emissions = formatC(Total_CO2_Emissions, format = "f", big.mark = ",", digits = 0))

datatable(
  top_emitters,
  options = list(
    pageLength = 10,
    autoWidth = TRUE
  ),
  caption = "Top 10 Agencies by CO₂ Emissions"
)
```

Are certain **modes of transport** worse for emissions?

```{r}
library(dplyr)
library(DT)

#Summarising CO2 emissions by transport mode
mode_emissions <- NTD_JOINED %>%
    group_by(Mode) %>%
    summarise(Total_CO2_Emissions = sum(Total_CO2_Emissions, na.rm = TRUE)) %>%
    arrange(desc(Total_CO2_Emissions))

mode_emissions <- mode_emissions %>%
    mutate(Total_CO2_Emissions = formatC(Total_CO2_Emissions, format = "f", big.mark = ",", digits = 0))

datatable(
  mode_emissions,
  options = list(
    pageLength = 10,
    autoWidth = TRUE
  ),
  caption = "CO₂ Emissions by Mode of Transport"
)
```

Final table that shows **total CO₂ emissions for each agency + mode**

```{r}
library(dplyr)
library(DT)

#Arranging the final dataset
final_table <- NTD_JOINED %>%
    select(Agency, State, Mode, Total_CO2_Emissions) %>%
    arrange(desc(Total_CO2_Emissions))

final_table <- final_table %>%
    mutate(Total_CO2_Emissions = formatC(Total_CO2_Emissions, format = "f", big.mark = ",", digits = 0))

datatable(
  final_table,
  options = list(
    pageLength = 10,  
    autoWidth = TRUE,
    scrollX = TRUE  
  ),
  caption = "Final Table of Total CO₂ Emissions by Agency and Mode"
)
```

## 6. Normalize Emissions to Transit Usage

#### Computing normalized emissions

```{r}
library(dplyr)
library(DT)

#Computing normalized emissions
NTD_JOINED <- NTD_JOINED %>%
    mutate(
        CO2_per_UPT = ifelse(UPT > 0, Total_CO2_Emissions / UPT, NA),
        CO2_per_Mile = ifelse(MILES > 0, Total_CO2_Emissions / MILES, NA)
    )

datatable(
    NTD_JOINED %>% select(Agency, State, Mode, Total_CO2_Emissions, CO2_per_UPT, CO2_per_Mile),
    options = list(pageLength = 10, autoWidth = TRUE),
    caption = "Normalized CO2 Emissions per UPT and per Passenger Mile"
)
```

#### Categorizing Agencies by their sizes

```{r}
library(dplyr)
library(DT)

#Computing agency-level total UPT
agency_sizes <- NTD_JOINED %>%
    group_by(Agency) %>%
    summarize(total_UPT = sum(UPT, na.rm = TRUE)) %>%
    mutate(
        size_category = case_when(
            total_UPT < quantile(total_UPT, 1/3, na.rm = TRUE) ~ "Small",
            total_UPT < quantile(total_UPT, 2/3, na.rm = TRUE) ~ "Medium",
            TRUE ~ "Large"
        )
    )

NTD_JOINED <- NTD_JOINED %>%
    left_join(agency_sizes, by = "Agency")

datatable(
    NTD_JOINED %>% select(Agency, State, Mode, size_category, Total_CO2_Emissions, CO2_per_UPT, CO2_per_Mile),
    options = list(pageLength = 10, autoWidth = TRUE),
    caption = "Categorized Agencies by Size with CO2 Emissions"
)
```

#### Finding the Most Efficient Agencies

```{r}
library(dplyr)
library(DT)

#Finding the most efficient agency per category
most_efficient_UPT <- NTD_JOINED %>%
    filter(!is.na(CO2_per_UPT)) %>%
    group_by(size_category) %>%
    slice_min(order_by = CO2_per_UPT, n = 1) %>%
    select(Agency, State, Mode, size_category, CO2_per_UPT)

most_efficient_Mile <- NTD_JOINED %>%
    filter(!is.na(CO2_per_Mile)) %>%
    group_by(size_category) %>%
    slice_min(order_by = CO2_per_Mile, n = 1) %>%
    select(Agency, State, Mode, size_category, CO2_per_Mile)

datatable(
    most_efficient_UPT,
    options = list(pageLength = 5, autoWidth = TRUE),
    caption = "Most Efficient Agencies (CO2 per UPT)"
)

datatable(
    most_efficient_Mile,
    options = list(pageLength = 5, autoWidth = TRUE),
    caption = "Most Efficient Agencies (CO2 per Passenger Mile)"
)
```

## **7. Determine Award Winners**

#### 7.1 Greenest Transit Agency

```{r}
#Computing Emissions per Passenger Mile
NTD_JOINED <- NTD_JOINED %>%
    mutate(
        Emissions_per_UPT = Total_CO2_Emissions / UPT,
        Emissions_per_Passenger_Mile = Total_CO2_Emissions / MILES
    )

#Finding the Greenest Transit Agency
greenest_agency <- NTD_JOINED %>%
    filter(!is.na(Emissions_per_Passenger_Mile) & Emissions_per_Passenger_Mile > 0) %>%
    arrange(Emissions_per_Passenger_Mile) %>%
    slice(1) %>%
    select(Agency, State, Mode, Emissions_per_Passenger_Mile)

library(DT)
datatable(
  greenest_agency, 
  options = list(pageLength = 5, autoWidth = TRUE), 
  caption = "Greenest Transit Agency: Lowest CO₂ per Passenger Mile"
)

```

#### 7.2 Most Emissions Avoided

```{r}
#Assuming 22.0 mpg fuel efficiency (CAFE standard)
#1 gallon of gasoline emits ~19.6 lbs CO2
cafe_mpg <- 22.0
gasoline_co2_per_gallon <- 19.6

NTD_JOINED <- NTD_JOINED %>%
    mutate(
        Car_Emissions = (MILES / cafe_mpg) * gasoline_co2_per_gallon,  
        # Emissions if all passengers drove
        Emissions_Avoided = Car_Emissions - Total_CO2_Emissions  
        #Emissions avoided by transit
    )

most_emissions_avoided <- NTD_JOINED %>%
    filter(!is.na(Emissions_Avoided)) %>%
    arrange(desc(Emissions_Avoided)) %>%
    slice(1) %>%
    select(Agency, State, Mode, Emissions_Avoided)

library(DT)
datatable(
  most_emissions_avoided,
  options = list(pageLength = 5, autoWidth = TRUE),
  caption = "Most Emissions Avoided by Transit Agency"
)

```

#### 7.3 Most Multi-Modal Agency

```{r}
library(dplyr)
library(DT)

#Counting different modals under which each agency operates
multi_modal <- NTD_JOINED %>%
  filter(!is.na(Agency), !is.na(Mode)) %>%
  group_by(Agency, State) %>%
  summarise(Num_Modes = n_distinct(Mode), .groups = "drop") %>%
  arrange(desc(Num_Modes)) %>%
  slice(1)

#Displaying the top multi-modal agency
datatable(
  multi_modal,
  options = list(pageLength = 5, autoWidth = TRUE),
  caption = "Most Multi-Modal Transit Agency (Highest Number of Modes Operated)"
)


```

#### 7.4 Least Efficient Transit Agency

```{r}
least_efficient_agency <- NTD_JOINED %>%
  filter(!is.na(Total_CO2_Emissions), UPT > 0) %>%
  mutate(Inefficiency_Score = Total_CO2_Emissions / UPT) %>%
  arrange(desc(Inefficiency_Score)) %>%
  slice(1) %>%
  select(Agency, State, Mode, Total_CO2_Emissions, UPT, Inefficiency_Score)

datatable(
  least_efficient_agency,
  caption = "Least Efficient Transit Agency (High Emissions, Low Ridership)",
  options = list(pageLength = 5, autoWidth = TRUE)
)

```

### **Visualization**

#### Greenest Transit Agency Visualization 

```{r}
library(dplyr)
library(ggplot2)
library(stringr)  

top_greenest <- NTD_JOINED %>%
  filter(!is.na(Emissions_per_Passenger_Mile), Emissions_per_Passenger_Mile > 0) %>%
  arrange(Emissions_per_Passenger_Mile) %>%
  slice(1:10)

#Reducing long agency names to display the graph properly
top_greenest$Agency <- str_wrap(top_greenest$Agency, width = 30)

ggplot(top_greenest, aes(x = reorder(Agency, Emissions_per_Passenger_Mile), 
                         y = Emissions_per_Passenger_Mile)) +
  geom_col(fill = "darkgreen") +
  coord_flip() +
  labs(
    title = "Top 10 Greenest Transit Agencies",
    subtitle = "Lowest CO₂ Emissions per Passenger Mile",
    x = "Agency",
    y = "CO₂ Emissions (lbs per Passenger Mile)"
  ) +
  theme_light(base_size = 12)

```

#### Least Efficient Transit Agency Visualization

```{r}
library(dplyr)
library(ggplot2)

#Top 10 worst efficiency
worst_10 <- NTD_JOINED %>%
  filter(!is.na(Emissions_per_UPT), Emissions_per_UPT > 0) %>%
  arrange(desc(Emissions_per_UPT)) %>%
  slice(1:10)

#Dot plot with smaller y-axis text
ggplot(worst_10, aes(x = Emissions_per_UPT, y = reorder(Agency, Emissions_per_UPT))) +
  geom_point(color = "blue", size = 4) +
  labs(
    title = "Top 10 Least Efficient Transit Agencies",
    subtitle = "Measured by CO₂ Emissions per Rider (UPT)",
    x = "CO₂ Emissions per UPT (lbs)",
    y = "Agency"
  ) +
  theme_light(base_size = 11) +
  theme(
    axis.text.y = element_text(size = 7),  
    #Shrinking y-axis label size
    plot.title = element_text(face = "bold"),
    plot.subtitle = element_text(size = 8)
  )

```

## Press Release 

#### **Award Title :** Greenest Transit Agency

**Short description of the metric**\
To find the greenest agency, we looked at how much CO₂ is released for every mile a person travels. The lower the emissions per mile, the cleaner and more eco-friendly the service is.

**Name of the winning agency + value**\
The winner is Susquehanna Regional Transportation Authority, dba: rabbittransit, with only **0.000094 lbs CO₂ per passenger mile**.

**Reference value for context**

In comparison, the typical agency produces about 0.00142 lbs of CO₂ per mile, which means rabbittransit is nearly 15 times more efficient than average.

#### **Award Title :** Most Emissions Avoided

**Short description of the metric**\
To determine which agency made the biggest impact in reducing emissions, we calculated how much CO₂ would have been produced if all passengers had used personal vehicles instead. We then compared that to the agency’s actual transit emissions to find how much pollution was avoided.

**Name of the winning agency + value**\
The winner is **MTA New York City Transit**, which avoided approximately **8.54 billion lbs of CO₂** by providing efficient public transit instead of individual car trips.

**Reference value for context**\
This number stands out dramatically compared to other agencies, thanks to the MTA's large ridership and high reliance on lower-emission rail systems.

#### **Award Title :** Most Multi-Modal Agency

**Short description of the metric**\
To determine the most multi-modal agency, we looked at how many different types of transit each agency runs—like buses, rail, or ferries. Agencies offering more modes typically provide more comprehensive service to a wider range of riders.

**Name of the winning agency + value**\
New Jersey Transit Corporation took the lead, operating six different transit modes. That variety reflects their strong commitment to providing flexible and accessible transportation options.

**Reference value for context**\
Since most agencies only run one or two modes, NJ Transit stands out as one of the most diverse and adaptable transit providers in the country.

#### **Award Title :** Least Efficient Transit Agency

**Short description of the metric**\
To determine which agency was the least efficient, we compared total CO₂ emissions to ridership numbers. Specifically, we calculated how many pounds of CO₂ were emitted for each individual passenger trip. The higher the number, the more inefficient the agency.

**Name of the winning agency + value**\
The Alaska Railroad Corporation stood out with an inefficiency score of **319.99**, meaning it emits nearly **320 pounds of CO₂** for every rider it serves.

**Reference value for context**

For context, the median transit agency emits **less than 3 pounds** of CO₂ per trip, making Alaska Railroad significantly less efficient than its peers.

#### Sources (APA Format)

-   U.S. Energy Information Administration. (2023). *State Electricity Profiles*. U.S. Department of Energy. [https://www.eia.gov/electricity/state/](#0)

<!-- -->

-   Federal Transit Administration. (2023). *2023 Annual Database: Energy Consumption*. U.S. Department of Transportation. [https://www.transit.dot.gov/ntd/data-product/2023-annual-database-energy-consumption](#0)

-   U.S. Department of Transportation. (2023). *2023 Service Data by Agency* \[CSV file\]. [https://data.transportation.gov/resource/6y83-7vuw.csv](#0)

## Conclusion

Mini Project 2 offered a detailed look into how transit agencies across the U.S. perform in terms of energy use, emissions, and operational efficiency. From identifying the greenest agency with the lowest emissions per passenger mile to recognizing those with the highest emissions avoided, the analysis revealed significant variation in environmental impact. I also highlighted agencies leading in electrification and multi-modal operations, while calling attention to those with inefficient practices. These findings not only highlight success stories but also point to opportunities for improvement in building a more sustainable transit future.
